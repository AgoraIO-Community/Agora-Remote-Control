// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EventMessage.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30004
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30004 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class DisplayInfo;
@class EventHeader;
@class KeyboardEvent;
@class MotionEvent;
@class MouseEvent;
@class RspCode;
@class ScreenInfoReq;
@class ScreenInfoRsp;
@class TouchEvent;
@class TraceReq;
@class TraceRsp;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum SYSTEM

typedef GPB_ENUM(SYSTEM) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  SYSTEM_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  SYSTEM_Android = 0,
  SYSTEM_Ios = 1,
  SYSTEM_Windows = 2,
};

GPBEnumDescriptor *SYSTEM_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL SYSTEM_IsValidValue(int32_t value);

#pragma mark - Enum ACTION

typedef GPB_ENUM(ACTION) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  ACTION_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /** 单点触摸按下动作 */
  ACTION_ActionDown = 0,

  /** 单点触摸离开动作 */
  ACTION_ActionUp = 1,

  /** 触摸点移动动作 */
  ACTION_ActionMove = 2,

  /** 触摸动作取消 */
  ACTION_ActionCancel = 3,

  /** 触摸动作超出边界 */
  ACTION_ActionOutside = 4,

  /** 多点触摸按下动作 */
  ACTION_ActionPointerDown = 5,

  /** 多点离开动作 */
  ACTION_ActionPointerUp = 6,
};

GPBEnumDescriptor *ACTION_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ACTION_IsValidValue(int32_t value);

#pragma mark - Enum TRACETYPE

typedef GPB_ENUM(TRACETYPE) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  TRACETYPE_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /** 传输链路中rtt延时 */
  TRACETYPE_RttDelay = 0,
};

GPBEnumDescriptor *TRACETYPE_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL TRACETYPE_IsValidValue(int32_t value);

#pragma mark - EventMessageRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
GPB_FINAL @interface EventMessageRoot : GPBRootObject
@end

#pragma mark - DisplayInfo

typedef GPB_ENUM(DisplayInfo_FieldNumber) {
  DisplayInfo_FieldNumber_DisplayHeight = 1,
  DisplayInfo_FieldNumber_DisplayWidth = 2,
  DisplayInfo_FieldNumber_Orientation = 3,
  DisplayInfo_FieldNumber_System = 4,
};

GPB_FINAL @interface DisplayInfo : GPBMessage

/** 显示区域surfaceView的高 */
@property(nonatomic, readwrite) int32_t displayHeight;

/** 显示区域surfaceView的宽 */
@property(nonatomic, readwrite) int32_t displayWidth;

/** 方向 */
@property(nonatomic, readwrite) int32_t orientation;

/** 操作系统的类型 */
@property(nonatomic, readwrite) SYSTEM system;

@end

/**
 * Fetches the raw value of a @c DisplayInfo's @c system property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t DisplayInfo_System_RawValue(DisplayInfo *message);
/**
 * Sets the raw value of an @c DisplayInfo's @c system property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetDisplayInfo_System_RawValue(DisplayInfo *message, int32_t value);

#pragma mark - TouchEvent

typedef GPB_ENUM(TouchEvent_FieldNumber) {
  TouchEvent_FieldNumber_PointerIndex = 1,
  TouchEvent_FieldNumber_PointerId = 2,
  TouchEvent_FieldNumber_LogicX = 3,
  TouchEvent_FieldNumber_LogicY = 4,
  TouchEvent_FieldNumber_Pressure = 5,
  TouchEvent_FieldNumber_Size = 6,
};

GPB_FINAL @interface TouchEvent : GPBMessage

/** 该触点的索引 */
@property(nonatomic, readwrite) int32_t pointerIndex;

/** 该触点的唯一标识 */
@property(nonatomic, readwrite) int32_t pointerId;

/** 逻辑坐标X，0到1之间 */
@property(nonatomic, readwrite) float logicX;

/** 逻辑坐标Y，0到1之间 */
@property(nonatomic, readwrite) float logicY;

/** 当前触点压力大小，0(无压力)到1(正常压力),和设备有关并可能会大于1 */
@property(nonatomic, readwrite) float pressure;

/** 触点区域大小，默认为1 */
@property(nonatomic, readwrite) float size;

@end

#pragma mark - MotionEvent

typedef GPB_ENUM(MotionEvent_FieldNumber) {
  MotionEvent_FieldNumber_DownTime = 1,
  MotionEvent_FieldNumber_EventTime = 2,
  MotionEvent_FieldNumber_Count = 3,
  MotionEvent_FieldNumber_Action = 4,
  MotionEvent_FieldNumber_EventsArray = 5,
};

/**
 * 触屏事件
 **/
GPB_FINAL @interface MotionEvent : GPBMessage

/** ms,SystemClock#uptimeMillis(),连续事件第一次触发时的系统时间 */
@property(nonatomic, readwrite) uint64_t downTime;

/** ms,SystemClock#uptimeMillis() - downTime，,由于时钟同步和网络延时，转化为相对于downTime的时间，并自己维护时钟状态 */
@property(nonatomic, readwrite) uint64_t eventTime;

/** events的个数 */
@property(nonatomic, readwrite) int32_t count;

/** 当前事件的类型 */
@property(nonatomic, readwrite) ACTION action;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<TouchEvent*> *eventsArray;
/** The number of items in @c eventsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger eventsArray_Count;

@end

/**
 * Fetches the raw value of a @c MotionEvent's @c action property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t MotionEvent_Action_RawValue(MotionEvent *message);
/**
 * Sets the raw value of an @c MotionEvent's @c action property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetMotionEvent_Action_RawValue(MotionEvent *message, int32_t value);

#pragma mark - MouseEvent

typedef GPB_ENUM(MouseEvent_FieldNumber) {
  MouseEvent_FieldNumber_DownTime = 1,
  MouseEvent_FieldNumber_EventTime = 2,
  MouseEvent_FieldNumber_Button0 = 3,
  MouseEvent_FieldNumber_Button1 = 4,
  MouseEvent_FieldNumber_Button2 = 5,
  MouseEvent_FieldNumber_Button3 = 6,
  MouseEvent_FieldNumber_Button4 = 7,
  MouseEvent_FieldNumber_LogicX = 8,
  MouseEvent_FieldNumber_LogicY = 9,
  MouseEvent_FieldNumber_AxisDltaZ = 10,
};

/**
 * 鼠标事件
 **/
GPB_FINAL @interface MouseEvent : GPBMessage

/** ms,SystemClock#uptimeMillis(),连续事件第一次触发时的系统时间,保持和安卓云手机格式兼容 */
@property(nonatomic, readwrite) uint64_t downTime;

/** ms,SystemClock#uptimeMillis() - downTime，,由于时钟同步和网络延时，转化为相对于downTime的时间，并自己维护时钟状态 */
@property(nonatomic, readwrite) uint64_t eventTime;

/** 鼠标左键,1:pressed,0:not pressed */
@property(nonatomic, readwrite) int32_t button0;

/** 鼠标右键,1:pressed,0:not pressed */
@property(nonatomic, readwrite) int32_t button1;

/** 鼠标中键,1:pressed,0:not pressed */
@property(nonatomic, readwrite) int32_t button2;

/** reserved */
@property(nonatomic, readwrite) int32_t button3;

/** reserved; */
@property(nonatomic, readwrite) int32_t button4;

/** x坐标轴绝对位置，逻辑坐标，0到1之间 */
@property(nonatomic, readwrite) float logicX;

/** y坐标轴绝对位置，逻辑坐标，0到1之间 */
@property(nonatomic, readwrite) float logicY;

/** 滚轮的相对位移 */
@property(nonatomic, readwrite) int32_t axisDltaZ;

@end

#pragma mark - KeyboardEvent

typedef GPB_ENUM(KeyboardEvent_FieldNumber) {
  KeyboardEvent_FieldNumber_KeysArray = 1,
};

/**
 * 键盘事件
 **/
GPB_FINAL @interface KeyboardEvent : GPBMessage

/** 每一个按键的状态信息，true:pressed,false:not pressed */
@property(nonatomic, readwrite, strong, null_resettable) GPBBoolArray *keysArray;
/** The number of items in @c keysArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger keysArray_Count;

@end

#pragma mark - RspCode

typedef GPB_ENUM(RspCode_FieldNumber) {
  RspCode_FieldNumber_Errcode = 1,
  RspCode_FieldNumber_Reason = 2,
};

GPB_FINAL @interface RspCode : GPBMessage

/** 0: 成功 */
@property(nonatomic, readwrite) int32_t errcode;

/** errcode的描述 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *reason;

@end

#pragma mark - TraceReq

typedef GPB_ENUM(TraceReq_FieldNumber) {
  TraceReq_FieldNumber_TraceType = 1,
  TraceReq_FieldNumber_Timestamp = 2,
};

/**
 * 链路跟踪请求
 **/
GPB_FINAL @interface TraceReq : GPBMessage

/** 跟踪调试的类型 */
@property(nonatomic, readwrite) TRACETYPE traceType;

@property(nonatomic, readwrite) uint64_t timestamp;

@end

/**
 * Fetches the raw value of a @c TraceReq's @c traceType property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t TraceReq_TraceType_RawValue(TraceReq *message);
/**
 * Sets the raw value of an @c TraceReq's @c traceType property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetTraceReq_TraceType_RawValue(TraceReq *message, int32_t value);

#pragma mark - TraceRsp

typedef GPB_ENUM(TraceRsp_FieldNumber) {
  TraceRsp_FieldNumber_TraceType = 1,
  TraceRsp_FieldNumber_Timestamp = 2,
  TraceRsp_FieldNumber_RspCode = 3,
};

/**
 * 链路跟踪回复
 **/
GPB_FINAL @interface TraceRsp : GPBMessage

/** 跟踪调试的类型 */
@property(nonatomic, readwrite) TRACETYPE traceType;

@property(nonatomic, readwrite) uint64_t timestamp;

@property(nonatomic, readwrite, strong, null_resettable) RspCode *rspCode;
/** Test to see if @c rspCode has been set. */
@property(nonatomic, readwrite) BOOL hasRspCode;

@end

/**
 * Fetches the raw value of a @c TraceRsp's @c traceType property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t TraceRsp_TraceType_RawValue(TraceRsp *message);
/**
 * Sets the raw value of an @c TraceRsp's @c traceType property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetTraceRsp_TraceType_RawValue(TraceRsp *message, int32_t value);

#pragma mark - ScreenInfoReq

typedef GPB_ENUM(ScreenInfoReq_FieldNumber) {
  ScreenInfoReq_FieldNumber_Resolution = 1,
};

/**
 * 请求云端屏幕参数信息
 **/
GPB_FINAL @interface ScreenInfoReq : GPBMessage

/** 请求云手机分辨率 */
@property(nonatomic, readwrite) int32_t resolution;

@end

#pragma mark - ScreenInfoRsp

typedef GPB_ENUM(ScreenInfoRsp_FieldNumber) {
  ScreenInfoRsp_FieldNumber_ScreenHeight = 1,
  ScreenInfoRsp_FieldNumber_ScreenWidth = 2,
  ScreenInfoRsp_FieldNumber_ScreenOrientation = 3,
  ScreenInfoRsp_FieldNumber_RspCode = 4,
};

/**
 * 云端屏幕参数信息
 **/
GPB_FINAL @interface ScreenInfoRsp : GPBMessage

@property(nonatomic, readwrite) int32_t screenHeight;

@property(nonatomic, readwrite) int32_t screenWidth;

@property(nonatomic, readwrite) int32_t screenOrientation;

@property(nonatomic, readwrite, strong, null_resettable) RspCode *rspCode;
/** Test to see if @c rspCode has been set. */
@property(nonatomic, readwrite) BOOL hasRspCode;

@end

#pragma mark - EventHeader

typedef GPB_ENUM(EventHeader_FieldNumber) {
  EventHeader_FieldNumber_Version = 1,
  EventHeader_FieldNumber_Sequence = 2,
};

/**
 * 事件头
 **/
GPB_FINAL @interface EventHeader : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *version;

/** 事件消息sequence */
@property(nonatomic, readwrite) int64_t sequence;

@end

#pragma mark - UplinkMessage

typedef GPB_ENUM(UplinkMessage_FieldNumber) {
  UplinkMessage_FieldNumber_EventHeader = 1,
  UplinkMessage_FieldNumber_MotionEvent = 2,
  UplinkMessage_FieldNumber_MouseEvent = 3,
  UplinkMessage_FieldNumber_KeyboardEvent = 4,
  UplinkMessage_FieldNumber_TraceReq = 5,
  UplinkMessage_FieldNumber_ScreenInfoReq = 6,
  UplinkMessage_FieldNumber_DisplayInfo = 7,
};

/**
 * 客户上传事件
 **/
GPB_FINAL @interface UplinkMessage : GPBMessage

/** 必填字段 */
@property(nonatomic, readwrite, strong, null_resettable) EventHeader *eventHeader;
/** Test to see if @c eventHeader has been set. */
@property(nonatomic, readwrite) BOOL hasEventHeader;

/** 可选字段 */
@property(nonatomic, readwrite, strong, null_resettable) MotionEvent *motionEvent;
/** Test to see if @c motionEvent has been set. */
@property(nonatomic, readwrite) BOOL hasMotionEvent;

/** 可选字段 */
@property(nonatomic, readwrite, strong, null_resettable) MouseEvent *mouseEvent;
/** Test to see if @c mouseEvent has been set. */
@property(nonatomic, readwrite) BOOL hasMouseEvent;

/** 可选字段 */
@property(nonatomic, readwrite, strong, null_resettable) KeyboardEvent *keyboardEvent;
/** Test to see if @c keyboardEvent has been set. */
@property(nonatomic, readwrite) BOOL hasKeyboardEvent;

/** 可选字段 */
@property(nonatomic, readwrite, strong, null_resettable) TraceReq *traceReq;
/** Test to see if @c traceReq has been set. */
@property(nonatomic, readwrite) BOOL hasTraceReq;

/** 可选字段 */
@property(nonatomic, readwrite, strong, null_resettable) ScreenInfoReq *screenInfoReq;
/** Test to see if @c screenInfoReq has been set. */
@property(nonatomic, readwrite) BOOL hasScreenInfoReq;

/** 可选字段 */
@property(nonatomic, readwrite, strong, null_resettable) DisplayInfo *displayInfo;
/** Test to see if @c displayInfo has been set. */
@property(nonatomic, readwrite) BOOL hasDisplayInfo;

@end

#pragma mark - DownlinkMessage

typedef GPB_ENUM(DownlinkMessage_FieldNumber) {
  DownlinkMessage_FieldNumber_EventHeader = 1,
  DownlinkMessage_FieldNumber_TraceRsp = 2,
  DownlinkMessage_FieldNumber_ScreenInfoRsp = 3,
};

/**
 * 服务器响应
 **/
GPB_FINAL @interface DownlinkMessage : GPBMessage

/** 必填字段 */
@property(nonatomic, readwrite, strong, null_resettable) EventHeader *eventHeader;
/** Test to see if @c eventHeader has been set. */
@property(nonatomic, readwrite) BOOL hasEventHeader;

/** 可选字段 */
@property(nonatomic, readwrite, strong, null_resettable) TraceRsp *traceRsp;
/** Test to see if @c traceRsp has been set. */
@property(nonatomic, readwrite) BOOL hasTraceRsp;

/** 可选字段 */
@property(nonatomic, readwrite, strong, null_resettable) ScreenInfoRsp *screenInfoRsp;
/** Test to see if @c screenInfoRsp has been set. */
@property(nonatomic, readwrite) BOOL hasScreenInfoRsp;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
